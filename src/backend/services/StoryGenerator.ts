// src/backend/services/StoryGenerator.ts

import { AIModelFactory, AIModelType } from './AIModelFactory';
import { AIModelParams } from './AIModelInterface';
export class StoryGenerator {
  private aiModel;

  constructor(modelType: AIModelType = AIModelType.OLLAMA) {
    console.log(`Initializing StoryGenerator with model type: ${modelType}`);
    this.aiModel = AIModelFactory.createModel(modelType);
  }

  async generateStory(prompt: string): Promise<string> {
    console.log(`Generating story with prompt: ${prompt}`);
    const params: AIModelParams = {
      prompt: `Generate a short story for children based on the following prompt: ${prompt}`,
      max_tokens: 500,
      temperature: 0.7
    };

    try {
      console.log('Sending request to AI model');
      const response = await this.aiModel.generateText(params);
      console.log('Received response from AI model:', response);
      
      if (!response.text) {
        throw new Error('No text generated by the AI model');
      }
      
      return response.text.trim();
    } catch (error: unknown) {
      console.error('Error in StoryGenerator:', error);
      if (error instanceof Error) {
        throw new Error(`Failed to generate story: ${error.message}`);
      } else {
        throw new Error('Failed to generate story: An unknown error occurred');
      }
    }
  }

  async generateOptions(prompt: string): Promise<Array<{title: string, description: string}>> {
    console.log(`Generating options with prompt: ${prompt}`);
    const params: AIModelParams = {
      prompt: `Generate 5 creative ways to present a story based on the following idea: ${prompt}
      For each option, provide a title and a brief description.
      Format the response as follows:
      1. Title: [Option 1 Title]
         Description: [Brief description of option 1]
      2. Title: [Option 2 Title]
         Description: [Brief description of option 2]
      ...and so on for all 5 options.`,
      max_tokens: 1000,
      temperature: 0.8
    };

    try {
      console.log('Sending request to AI model for options');
      const response = await this.aiModel.generateText(params);
      console.log('Received response from AI model:', response);
      
      if (!response.text) {
        throw new Error('No text generated by the AI model');
      }
      
      const options = this.parseOptions(response.text);
      return options;
    } catch (error: unknown) {
      console.error('Error in StoryGenerator generateOptions:', error);
      if (error instanceof Error) {
        throw new Error(`Failed to generate options: ${error.message}`);
      } else {
        throw new Error('Failed to generate options: An unknown error occurred');
      }
    }
  }

  private parseOptions(text: string): Array<{title: string, description: string}> {
    const lines = text.split('\n');
    const options = [];
    let currentOption: {title: string, description: string} | null = null;
  
    for (const line of lines) {
      const titleMatch = line.match(/^\d+\.\s*\*\*Title:\*\*\s*(.*)/);
      if (titleMatch) {
        if (currentOption) {
          options.push(currentOption);
        }
        currentOption = { title: titleMatch[1].trim(), description: '' };
      } else if (line.includes('Description:') && currentOption) {
        currentOption.description = line.split('Description:')[1].trim();
      } else if (currentOption && currentOption.description) {
        currentOption.description += ' ' + line.trim();
      }
    }
  
    if (currentOption) {
      options.push(currentOption);
    }
  
    console.log('Parsed options:', options);
    return options;
  }
  async createStory(option: { title: string, description: string }, content: string): Promise<string> {
    console.log(`Creating story based on option: ${option.title}`);
    const params: AIModelParams = {
      prompt: `Create a story based on the following option and initial content:
      
      Option: ${option.title}
      Description: ${option.description}
      
      Initial Content:
      ${content}
      
      Please expand on this initial content, keeping in mind the chosen option and its description. Create a compelling narrative that fits the selected presentation style.`,
      max_tokens: 1000,
      temperature: 0.7
    };

    try {
      console.log('Sending request to AI model for story creation');
      const response = await this.aiModel.generateText(params);
      console.log('Received response from AI model:', response);
      
      if (!response.text) {
        throw new Error('No text generated by the AI model');
      }
      
      return response.text.trim();
    } catch (error: unknown) {
      console.error('Error in StoryGenerator createStory:', error);
      if (error instanceof Error) {
        throw new Error(`Failed to create story: ${error.message}`);
      } else {
        throw new Error('Failed to create story: An unknown error occurred');
      }
    }
  }
}